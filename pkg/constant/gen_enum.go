// Code generated by "enum -type=CategoryGroupKind -linecomment=true -output=gen_enum.go"; DO NOT EDIT.

package constant

import (
	"encoding/json"
	"fmt"
	"github.com/spf13/cast"
	"strings"
)

func categoryGroupKind() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[CategoryProductType-1]
	_ = x[CategoryTechType-2]
	_ = x[CategoryIndustryType-3]
}

// CategoryGroupKind Key Value Map
var categoryGroupKindKeyMap = map[CategoryGroupKind]string{
	CategoryProductType:  "product_type",
	CategoryTechType:     "tech_type",
	CategoryIndustryType: "industry_type",
}

func CategoryGroupKindByKey(key string) (CategoryGroupKind, error) {
	target := strings.ToLower(key)
	for k, v := range categoryGroupKindKeyMap {
		if v == target {
			return k, nil
		}
	}
	return 0, fmt.Errorf("invalid key: %s for CategoryGroupKind", key)
}

func (i CategoryGroupKind) String() string {
	return categoryGroupKindKeyMap[i]
}

// func for Borm
func (i *CategoryGroupKind) Value() (interface{}, error) {
	return int(*i), nil
}

func (i *CategoryGroupKind) SetValue(v interface{}) error {
	inst := CategoryGroupKind(cast.ToInt(v))
	_, ok := categoryGroupKindKeyMap[inst]
	if !ok {
		return fmt.Errorf("invalid provider %d", int(inst))
	}
	*i = inst
	return nil
}

// func for JSON
func (i CategoryGroupKind) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

func (i *CategoryGroupKind) UnmarshalJSON(data []byte) error {
	var key string
	err := json.Unmarshal(data, &key)
	if err != nil {
		return err
	}

	inst, err := CategoryGroupKindByKey(key)
	if err != nil {
		return err
	}

	*i = inst
	return nil
}
